import type { DMMF } from "@prisma/generator-helper";
import type { PrismaExtractorConfig } from "./config";

function mapPrismaTypeToTsType(
  prismaType: string,
  config: PrismaExtractorConfig
): string {
  return config.mapTypes[prismaType] || prismaType;
}

export function generateTsInterfaces(
  models: DMMF.Model[],
  enums: DMMF.DatamodelEnum[],
  config: PrismaExtractorConfig
): string {
  let content = `// This file is auto-generated by [sc-prisma-extractor](https://github.com/saulotarsobc/sc-prisma-extractor).
// Do not edit this file directly.

`;

  // Generate Enums
  enums.forEach((enumDef: DMMF.DatamodelEnum) => {
    if (config.enumOutputType === "type") {
      const values = enumDef.values
        .map((value: DMMF.EnumValue) => `"${value.name}"`) // Corrected: escaped double quotes within template literal
        .join(" | ");
      content += `export type ${enumDef.name} = ${values};

`;
    } else {
      content += `export enum ${enumDef.name} {
`;
      enumDef.values.forEach((value: DMMF.EnumValue) => {
        content += `  ${value.name} = "${value.name}",
`;
      });
      content += `}

`;
    }
  });

  // Generate Interfaces or Types
  models.forEach((model: DMMF.Model) => {
    const keyword = config.outputType === "type" ? "type" : "interface";
    const separator = config.outputType === "type" ? " =" : "";
    content += `export ${keyword} ${model.name}${separator} {
`;
    model.fields.forEach((field: DMMF.Field) => {
      const tsType = mapPrismaTypeToTsType(field.type, config);
      const isRelation = field.kind === "object"; // relation fields
      const isIdField: boolean =
        typeof (field as any).isId === "boolean" ? (field as any).isId : false;
      const isOptional =
        !field.isRequired ||
        (config.relationFieldsOptional && isRelation) ||
        (!isIdField && false); // Campos @id nunca s√£o opcionais
      const isList = field.isList;
      let fieldType = tsType;
      if (isList) {
        fieldType += "[]";
      }
      if (isOptional) {
        fieldType += " | null";
      }
      content += `  ${field.name}${isOptional ? "?" : ""}: ${fieldType};\n`;
    });
    content += `}

`;
  });

  return content;
}
