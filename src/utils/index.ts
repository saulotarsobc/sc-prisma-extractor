import type { DMMF } from "@prisma/generator-helper";
import { getDMMF } from "@prisma/internals";
import { existsSync, readFileSync } from "node:fs";
import { resolve } from "node:path";
import { SchemaInformation } from "../interfaces";

/**
 * Extracts models and enums from a Prisma schema file.
 *
 * @param schemaPath - The absolute or relative path to the schema.prisma file.
 * @returns A promise that resolves to an object containing the extracted models and enums.
 * @throws An error if the schema file cannot be read or parsed.
 */
export async function extractSchema(
  schemaPath: string
): Promise<SchemaInformation> {
  try {
    const resolvedPath = resolve(schemaPath);
    if (!existsSync(resolvedPath)) {
      throw new Error(`Schema file not found at: ${resolvedPath}`);
    }

    const schema = readFileSync(resolvedPath, "utf-8");
    const dmmf = await getDMMF({ datamodel: schema });

    return {
      models: [...dmmf.datamodel.models],
      enums: [...dmmf.datamodel.enums],
    };
  } catch (error) {
    console.error("ðŸŸ¥ Failed to extract schema:\n", error);
    throw new Error("Could not process Prisma schema.");
  }
}

function mapPrismaTypeToTsType(prismaType: string): string {
  switch (prismaType) {
    case "String":
      return "string";
    case "Int":
    case "Float":
      return "number";
    case "BigInt":
      return "bigint";
    case "Boolean":
      return "boolean";
    case "DateTime":
      return "Date";
    case "Json":
      return "string";
    case "Decimal":
      return "number";
    case "Bytes":
      return "Buffer";
    default:
      return prismaType;
  }
}

export function generateTsInterfaces(
  models: DMMF.Model[],
  enums: DMMF.DatamodelEnum[]
): string {
  let content = `// This file is auto-generated by sc-prisma-extractor.\n// Do not edit this file directly.\n\n`;

  // Generate Enums
  enums.forEach((enumDef: DMMF.DatamodelEnum) => {
    content += `export enum ${enumDef.name} {
`;
    enumDef.values.forEach((value: DMMF.EnumValue) => {
      content += `  ${value.name} = "${value.name}",
`;
    });
    content += `}

`;
  });

  // Generate Interfaces
  models.forEach((model: DMMF.Model) => {
    content += `export interface ${model.name} {
`;
    model.fields.forEach((field: DMMF.Field) => {
      const tsType = mapPrismaTypeToTsType(field.type);
      const isOptional = !field.isRequired;
      const isList = field.isList;
      content += `  ${field.name}${isOptional ? "?" : ""}: ${tsType}${
        isList ? "[]" : ""
      };
`;
    });
    content += `}

`;
  });

  return content;
}
