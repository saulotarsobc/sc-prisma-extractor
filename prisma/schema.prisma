generator client {
  provider = "prisma-client-ts"
  output   = "../src/generated/prisma-client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

/**
 * Example model
 * Just an example model for demonstration types mapping
 * export interface Example {
 * ...... id: string;
 * ...... BigInt: bigint;
 * ...... Boolean: boolean;
 * ...... Bytes: Buffer;
 * ...... DateTime: Date;
 * ...... Decimal: number;
 * ...... Float: number;
 * ...... Int: number;
 * ...... Json: string;
 * ...... String: string;
 * }
 */

// model Example {
//   id          String                                     @id @default(cuid())
//   BigInt      BigInt
//   Boolean     Boolean
//   Bytes       Bytes
//   DateTime    DateTime
//   Decimal     Decimal
//   Float       Float
//   Int         Int
//   Json        Json
//   String      String
//   Unsupported Unsupported("This is an unsupported type") // Custom unsupported type for testing

//   @@map("examples")
// }

model User {
  id         String   @id @default(cuid())
  username   String
  email      String   @unique
  password   String
  role       Role     @default(USER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  posts         Post[]
  comments      Comment[]
  like_posts    LikePost[]
  like_comments LikeComment[]

  @@map("users")
}

model Post {
  id         String   @id @default(cuid())
  title      String
  content    String?
  published  Boolean  @default(false)
  author_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [author_id], references: [id], onDelete: Restrict)

  comments   Comment[]
  like_posts LikePost[]

  @@map("posts")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  user_id    String
  post_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user          User          @relation(fields: [user_id], references: [id])
  post          Post          @relation(fields: [post_id], references: [id], onDelete: Restrict)
  like_comments LikeComment[]

  @@map("comments")
}

model LikeComment {
  id         String   @id @default(cuid())
  user_id    String
  comment_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User    @relation(fields: [user_id], references: [id], onDelete: Restrict)
  comment Comment @relation(fields: [comment_id], references: [id], onDelete: Restrict)

  @@map("like_comments")
}

model LikePost {
  id         String   @id @default(cuid())
  user_id    String
  post_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Restrict)
  post Post @relation(fields: [post_id], references: [id], onDelete: Restrict)

  @@map("like_posts")
}
